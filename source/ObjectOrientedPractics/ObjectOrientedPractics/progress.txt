лаба 4 


!Замечание в классах некоторых у арсе пропали конструкторы
+ оставил коменнты в картц таб перед показамом снести
+ оставил комент в orderControl.cs 







10. Измените логику обработки смены выбранного заказа на вкладке. Теперь,
если пользователь выберет заказ в таблице заказов, программа должна определить, является ли выбранный заказ приоритетным (механизм GetType(), описанный выше, или ключевые слова is и as).
Если заказ приоритетный, то объект
приоритетного заказа должен сохраниться в уже существующем поле
_selectedOrder и в поле типа PriorityOrder _selectedPriorityOrder, которое надо будет добавить. То есть, один и тот же объект заказа будет одновременно храниться в двух полях, но в одном поле мы сможем работать с объектом заказа
как с обычным заказом, а в тех случаях, когда нам понадобится обратиться к
данным PriorityOrder, мы будем работать с объектом через второе поле.
11. Если выбранный заказ не приоритетный, то поле _selectedPriorityOrder
должно сбрасываться в null. В зависимости от того, является новый выбранный
заказ приоритетным или нет, должна меняться видимость выпадающего
9
списка Delivery Time и его подписей. Если заказ приоритетный, то выпадающий
список Delivery Time должен быть видимым пользователю, и также проинициализированным значением из заказа.
12. Есть несколько способов реализовать описанную выше логику: написать
алгоритм непосредственно в обработчике DataGridView_SelectedIndexChanged,
либо реализовать определение типа заказа внутри сеттера свойства Order SelectedOrder вкладки OrdersTab. Кроме того, логику можно разделить на несколько последовательных методов, а вместо поля _selectedPriorityOrder (то
есть постоянного хранения объекта внутри вкладки) внутри методов можно использовать логику определения типа заказа _selectedOrder и делать преобразование (то есть, хранить заказ по общей ссылке и преобразовывать только при
необходимости). Все перечисленные реализации верные, но автор предпочел
бы реализацию на основе сеттера свойства и выделения нового поля под приоритетный заказ.
13. Добавьте логику выбора времени доставки. Если пользователь выбирает
другое время доставки, новое время должно сохраниться в приоритетном заказе.
14. Вкладку PriorityOrdersTab теперь можно удалить из главного меню, но сам
класс вкладки пока оставить в программе – для защиты задания перед преподавателем.
15. Таким образом, мы расширили функциональность нашей программы новым типом заказов. Без наследования нам бы пришлось дублировать реализацию практически всей программы для того, чтобы пользователь работал с приоритетными заказами. Однако благодаря наследованию, нам было достаточно
добавить только ту логику, которая работает с новой функциональностью дочернего класса – а работа с унаследованными полями обеспечивается ранее
написанным кодом.
16. Запустите программу и проверьте правильность работы. Если в предыдущем задании вы реализовывали поиск заказов, убедитесь, что он корректно работает в новой версии. Проверьте правильность верстки и её адаптивность.
Проверьте структуру проекта, правильность оформления кода и наличие всех
комментариев. Сделайте коммит.